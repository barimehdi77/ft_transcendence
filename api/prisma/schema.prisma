// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                               Int            @id @default(autoincrement())
  profile                          Profile?
  intra_id                         Int            @unique @default(0)
  first_name                       String
  last_name                        String
  login                            String         @unique
  user_name                        String?        @unique
  email                            String         @unique
  image_url                        String
  twoFactorAuthenticationSecret    String?        @unique
  isTwoFactorAuthenticationEnabled Boolean        @default(false)
  profile_done                     Boolean        @default(false)
  Matches                          Match[]
  MemberConversations              Conversation[] @relation("members")
  AdminConversations               Conversation[] @relation("admins")
  messagesSent                     Message[]      @relation("messagesSent")
  ConversationCreated              Conversation[]
  BannedUser                       BannedUser[]   @relation("user_banned")
  BannedUserBy                     BannedUser[]   @relation("banned_by")

  @@map(name: "user")
}

model Profile {
  id           Int           @id @default(autoincrement())
  user         User          @relation(fields: [user_id], references: [id])
  status       ProfileStatus @default(ONLINE)
  user_id      Int           @unique
  user_points  Int           @default(0)
  played_games Int           @default(0)
  wins         Int           @default(0)
  losses       Int           @default(0)

  @@map(name: "profile")
}

model Match {
  id               Int    @id @default(autoincrement())
  player_one       String
  player_two       String
  player_one_score Int
  player_two_score Int
  status           GameStatus
  User             User?  @relation(fields: [userId], references: [id])
  userId           Int?
}

model FriendsList {
  id     Int          @id @default(autoincrement())
  from   Int
  to     Int
  status FriendStatus @default(PENDING)

  @@unique([from, to])
  @@map(name: "friendsList")
}

model Conversation {
  conversation_id String    @id @default(uuid())
  type            String // dm or room
  name            String
  status          String // public or private or locked (with password)
  last_message_at DateTime  @default(now())
  password        String?
  admins          User[]    @relation("admins")
  members         User[]    @relation("members")
  messages        Message[]

  userId     Int
  user       User         @relation(fields: [userId], references: [intra_id])
  createdAt  DateTime     @default(now())
  BannedUser BannedUser[]

  @@map("conversations")
}

model Message {
  message_id      String       @id @default(uuid())
  conversation_id String
  conversation    Conversation @relation(fields: [conversation_id], references: [conversation_id])
  sent_by_id      Int
  sent_by         User         @relation("messagesSent", fields: [sent_by_id], references: [intra_id])
  body            String
  sentAt          DateTime     @default(now())

  @@map("messages")
}

model BannedUser {
  ban_id          String       @id @default(uuid())
  userId          Int
  user            User         @relation("user_banned", fields: [userId], references: [intra_id])
  conversation_id String
  conversation    Conversation @relation(fields: [conversation_id], references: [conversation_id])
  bannedBy_id     Int
  bannedBy        User         @relation("banned_by", fields: [bannedBy_id], references: [intra_id])
  duration        Int          @default(0)
  bannedUntil     DateTime     @default(now())
  bannedAt        DateTime     @default(now())
  lastBan_at      DateTime     @updatedAt

  @@map("bannedUsers")
}

enum FriendStatus {
  PENDING
  ACCEPTED
  BLOCKED
}

enum ProfileStatus {
  ONLINE
  INGAME
  OFFLINE
}

enum GameStatus {
  PLAYING
  ENDED
}
